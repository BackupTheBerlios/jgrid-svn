<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>Overview</title>
    <abstract>
        This is an overview of what JEGrid does and what kind of infrastructure it needs to run on.
        If you are evaluating JEGrid and want to know more about how it works, you are in the right place.
    </abstract>
    </header>
  <body> 
   <section id="architecture">
       <title>Architecture</title>
       <section><title>Grid</title></section>
       <p>A Grid is a set of nodes that know about each other.  Each node can be one of three types:</p>
       <ol>
           <li><strong>Observer</strong> - Views the status of all the other nodes, used for monitoring.</li>
           <li><strong>Client</strong> - Creates tasks and runs them on the server nodes in the grid.</li>
           <li><strong>Server</strong> - Processes task input, produces output.</li>
       </ol>
       <p><img src="overview.png" alt="JEGrid architecture"/></p>
       <p>A running and functional grid with JEGrid will consist of:</p>
       <ul>
           <li>At least one server JVM that will do work on behalf of clients.  The degree of paralellism
           depends entirely on the number of server JVMs.</li>
           <li>At least one client JVM that will be assigning work to the servers.</li>
       </ul>
       <p>Each node is connected to the grid and will send messages to other nodes based on what they need
       to do.  The interconnect is called the Bus. Typically, server nodes will each run in their own JVMs, and
       clients and observer nodes will run inside a web or GUI application JVM, usually as a singleton.</p>
       <section>
           <title>Deployment</title>
           <p>Paralellism is achieved by assigning work to multiple server simultaneously.  In many
           cases, this work is CPU intensive and may take a long time to complete.</p>
           <ul>
               <li>For CPU intensive algorithms, it is recommended that you deploy the server nodes
               on dedicated hardware.  Server nodes can be deployed along J2EE application servers
               for example, but this may cause resource contention.</li>
               <li>The grid hosts should be connected by a network that supports multicast IP packets.
               While it is definitely possible to use non-multicast protocols, JEGrid will function
               best if it is on a high-speed, relatively reliable network that supports IP multicast.</li>
               <li>The classes for the end-user's application should be in the class path for both the
               client and the server.   As of this writing, JEGrid doesn't support dynamic class loading.
               </li>
           </ul>
       </section>
   </section>
   <section>
       <title>Concepts</title>
       <p>This section covers the basic concepts and terminology used in JEGrid.</p>
       <section id="client">
           <title>Client Nodes</title>
           <p>Clients create tasks and assign work to <a href="#workers">workers</a> that live on
               the <a href="#server">Server Nodes</a>.  The client JVM will:</p>
           <ol>
               <li>Manage the queue of input elements and corresponding output for each task.</li>
               <li>Do any aggregation.  The caller's thread will be used in most cases.</li>
               <li>Receive log messages from any workers on remote JVMs.</li>
               <li>Submit 'background' tasks to a server, in which case the server JVM does all
                   the work.</li>
           </ol>
       </section>
       <section id="server">
           <title>Server Nodes</title>
           <p>Servers contain a pool of workers that are assigned to various <a href="#tasks">tasks</a>.
           Each server can also act like a client in some cases.  Servers can also process 'background' tasks
           where the server JVM will use a worker thread to do both the client (aggregation, input queue) and
           and the server (processing input) work.</p>
       </section>
       <section id="observer">
           <title>Observer Nodes</title>
           <p>Observers are nodes that exist only to monitor the grid.  This is essential for
           production systems where the IT staff will want to take corrective action if there
           is a failure.</p>
       </section>
       <section id="tasks">
           <title>Tasks</title>
           <p>Tasks are the basic unit of work in JEGrid.  Each task has:</p>
           <ul>
               <li>A list of data that is to be processed in parallel.</li>
               <li>The code that should be used to process each input.</li>
               <li>The code that should be used to aggregate the output for each input.</li>
           </ul>
           <p>Once a task has the list of inputs and the processing class, the task can be started on grid.
               Once started, the task acts like a distributed thread pool.  Each worker thread will begin
               processing input as fast as it can, in parallel with all the other workers associated with that
               task.  The results of the workers will be aggregated in the client JVM.  Once all the input has been
               processed and the output has been aggregated, the task is completed.
           </p>
           <p><img
           src="running-task.png" alt="running task"/></p>
           <p>The lifecycle of a task is as follows:</p>
           <ol>
               <li>A task is created by a Client.  It is given an id by the Client.</li>
               <li>Input data is added to the task.  This data is placed in the task's input queue.</li>
               <li>The task is assigned to workers on the grid and the workers begin asking for input from the queue.
               Each input will only be given to one worker at a time.</li>
               <li>Output from the workers is sent to the aggregator by the task.  The task keeps track of the
               work that is not finished yet.</li>
               <li>Once an output has been received for each input, the task is complete.</li>
           </ol>
       </section>
       <section id="workers">
           <title>Workers</title>
           <p>Workers are threads on a server that process input from the queue of the task they are assigned to.
           Each server has a pool of workers.   Clients will ask the servers to allocate workers to tasks and give them
           a signal to begin processing once everything is ready.  The lifecycle of a worker is as follows:
           </p>
           <ol>
               <li>A worker is created by a server if the server has not reached the maximum number of workers.</li>
               <li>The worker is assigned to a task and waits for the go signal.
                  It now knows the network address of the client and the task id.
               </li>
                <li>When the go signal is received, the worker will instantiate the input processor class.</li>
               <li>The worker will then repeatedly ask for input from the task, processs it with the input processor, and
               send the output back to the task.</li>
               <li>When there is no more input, the worker is released back to the pool on the server.</li>
            </ol>
        </section>
   </section>
  </body>
</document>

